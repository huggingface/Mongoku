#!/usr/bin/env node

import { Command } from "commander";
import chalk from "chalk";
import { spawn, SpawnOptions } from "child_process";
import { fileURLToPath } from "url";
import { dirname, join } from "path";
import { readFileSync } from "fs";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Read version from package.json (go up one level if in dist directory)
const rootDir = __dirname.endsWith("dist") ? dirname(__dirname) : __dirname;
const packageJsonPath = join(rootDir, "package.json");
const packageJson = JSON.parse(readFileSync(packageJsonPath, "utf-8"));
const version = packageJson.version;

const program = new Command();

// generated by figlet.textSync('Mongoku', { horizontalLayout: 'full' }))

// __  __                                   _
// |  \/  |   ___    _ __     __ _    ___   | | __  _   _
// | |\/| |  / _ \  | '_ \   / _` |  / _ \  | |/ / | | | |
// | |  | | | (_) | | | | | | (_| | | (_) | |   <  | |_| |
// |_|  |_|  \___/  |_| |_|  \__, |  \___/  |_|\_\  \__,_|
//                           |___/

const asciiArt = [
	"__  __                                   _            ",
	"|  \\/  |   ___    _ __     __ _    ___   | | __  _   _ ",
	"| |\\/| |  / _ \\  | '_ \\   / _` |  / _ \\  | |/ / | | | |",
	"| |  | | | (_) | | | | | | (_| | | (_) | |   <  | |_| |",
	"|_|  |_|  \\___/  |_| |_|  \\__, |  \\___/  |_|\\_\\  \\__,_|",
	"                           |___/                        ",
].join("\n");

program.name("mongoku").description("MongoDB client for the web").version(version);

program
	.command("start")
	.description("Start the Mongoku server")
	.option("--pm2", "Run with PM2")
	.option("--forever", "Run with Forever")
	.option("-p, --port <port>", "Port to run on", "3100")
	.option("--readonly", "Enable read-only mode (prevents modifications)")
	.action((options) => {
		console.log(chalk.cyan(asciiArt));

		const port = options.port || process.env.MONGOKU_SERVER_PORT || "3100";
		process.env.MONGOKU_SERVER_PORT = port;

		// Set read-only mode if specified
		if (options.readonly) {
			process.env.MONGOKU_READ_ONLY_MODE = "true";
			console.log(chalk.yellow("ðŸ”’ Read-only mode enabled"));
		}

		const buildPath = join(rootDir, "build");

		if (options.pm2) {
			console.log(chalk.green("ðŸš€ Starting Mongoku with PM2..."));
			runCommand("pm2", ["start", join(rootDir, "pm2/development.json")], { detached: true });
		} else if (options.forever) {
			console.log(chalk.green("ðŸš€ Starting Mongoku with Forever..."));
			runCommand("forever", ["start", join(buildPath, "index.js")], { detached: true });
		} else {
			console.log(chalk.green(`ðŸš€ Starting Mongoku on port ${port}...`));
			console.log(chalk.cyan(`ðŸ“Š Open http://localhost:${port} in your browser`));
			runCommand("node", [buildPath], { stdio: "inherit" });
		}
	});

program
	.command("stop")
	.description("Stop the Mongoku server (PM2 or Forever)")
	.action(() => {
		// Try PM2 first
		const pm2Process = spawn("pm2", ["stop", "mongoku"], { stdio: "inherit" });
		pm2Process.on("error", () => {
			// If PM2 fails, try Forever
			console.log(chalk.yellow("PM2 not found, trying Forever..."));
			runCommand("forever", ["stop", "mongoku"]);
		});
	});

function runCommand(command: string, args: string[], options: SpawnOptions = {}): Promise<void> {
	return new Promise((resolve, reject) => {
		const childProcess = spawn(command, args, {
			...options,
			shell: true,
			env: { ...process.env },
		});

		if (!options.detached && options.stdio !== "inherit") {
			childProcess.stdout?.on("data", (data) => {
				console.log(data.toString());
			});

			childProcess.stderr?.on("data", (data) => {
				console.error(data.toString());
			});
		}

		childProcess.on("error", (error) => {
			console.error(chalk.red(`Error: ${error.message}`));
			reject(error);
		});

		childProcess.on("close", (code) => {
			if (code !== 0 && !options.detached) {
				reject(new Error(`Command failed with exit code ${code}`));
			} else {
				resolve();
			}
		});

		if (options.detached) {
			childProcess.unref();
			resolve();
		}
	});
}

program.parse(process.argv);

// Show help if no command provided
if (!process.argv.slice(2).length) {
	program.outputHelp();
}
